//
//  QuickOpenTests.swift
//  QuickOpenTests
//
//  Created by Chris Eidhof on 14.07.20.
//  Copyright Â© 2020 Chris Eidhof. All rights reserved.
//

import XCTest
import QuickOpen

var options: XCTMeasureOptions {
    let o = XCTMeasureOptions()
    o.iterationCount = 50
    return o
}

class QuickOpenTests: XCTestCase {
    func testSearch0() {

        // prepare
        let elements = [
            "2018 05 12 kitchen table bill ikea",
            "2018 01 07 tom tailor shirt bill",
            "kitchen wood table"
        ]
        .map { Array($0.utf8) }

        // act
        let foundElements = elements.testFuzzyMatch("bill")

        // assert
        XCTAssertEqual(foundElements.count, 2)
    }
    
    func testSearchCPUCoreCount1() {

        // prepare
        let elements = stride(from: 0, to: ProcessInfo.processInfo.activeProcessorCount + 4, by: 1)
            .map { "2018 05 \($0) kitchen table bill ikea" }
            .map { Array($0.utf8) }

        // act
        let foundElements = elements.testFuzzyMatch("bill")

        // assert
        // FAILS: 12 != 16
        XCTAssertEqual(foundElements.count, elements.count)
    }
    
    func testSearchCPUCoreCount2() {

        // prepare
        let elements = stride(from: 0, to: ProcessInfo.processInfo.activeProcessorCount - 2, by: 1)
            .map { "2018 05 \($0) kitchen table bill ikea" }
            .map { Array($0.utf8) }

        // act
        let foundElements = elements.testFuzzyMatch("bill")

        // assert
        // FAILS: 0 != 10
        XCTAssertEqual(foundElements.count, elements.count)
    }
    
    func testSearchCPUCoreCount3() {

        // prepare
        let elements = stride(from: 0, to: ProcessInfo.processInfo.activeProcessorCount, by: 1)
            .map { "2018 05 \($0) kitchen table bill ikea" }
            .map { Array($0.utf8) }

        // act
        let foundElements = elements.testFuzzyMatch("bill")

        // assert
        // FAILS: 0 != 10
        XCTAssertEqual(foundElements.count, elements.count)
    }

    func testPerformance() throws {
        measure(options: options) {
            utf8Files.testFuzzyMatch("string")
        }
    }

}
